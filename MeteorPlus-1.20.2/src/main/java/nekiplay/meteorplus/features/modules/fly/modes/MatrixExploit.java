package nekiplay.meteorplus.features.modules.fly.modes;

import meteordevelopment.meteorclient.events.entity.player.PlayerMoveEvent;
import meteordevelopment.meteorclient.events.world.TickEvent;
import meteordevelopment.meteorclient.mixininterface.IVec3d;
import meteordevelopment.meteorclient.systems.modules.Modules;
import meteordevelopment.meteorclient.systems.modules.movement.Anchor;
import meteordevelopment.meteorclient.utils.misc.Names;
import meteordevelopment.meteorclient.utils.player.FindItemResult;
import meteordevelopment.meteorclient.utils.player.InvUtils;
import meteordevelopment.meteorclient.utils.player.PlayerUtils;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.util.math.Vec3d;
import nekiplay.meteorplus.features.modules.fly.FlyMode;
import nekiplay.meteorplus.features.modules.fly.FlyModes;

public class MatrixExploit extends FlyMode {
	public MatrixExploit() {
		super(FlyModes.Matrix_Exploit);
	}

	private int tick = 0;
	private int tick2 = 0;

	@Override
	public void onActivate() {
		tick = 0;
		tick = 2;
		FindItemResult r = InvUtils.find(Items.ELYTRA);
		if (!r.found()) {
			settings.error(Names.get(Items.ELYTRA) + " not found");
			settings.toggle();
		}
	}

	@Override
	public void onDeactivate() {
		if (!mc.player.isSpectator()) {
			mc.player.getAbilities().flying = false;
			mc.player.getAbilities().setFlySpeed(0.05f);
			if (mc.player.getAbilities().creativeMode) return;
			mc.player.getAbilities().allowFlying = false;
		}
	}

	public void startFly() {
		mc.player.networkHandler.sendPacket(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.START_FALL_FLYING));
	}

	@Override
	public void onTickEventPre(TickEvent.Pre event) {
		FindItemResult r = InvUtils.find(Items.ELYTRA);

		float yaw = mc.player.getYaw();
		Vec3d forward = Vec3d.fromPolar(0, yaw);
		Vec3d right = Vec3d.fromPolar(0, yaw + 90);

		double velX = 0;
		double velZ = 0;
		double s = settings.speed.get();
		double speedValue = 0.01;
		if (mc.options.forwardKey.isPressed()) {
			velX += forward.x * s;
			velZ += forward.z * s;
		}
		if (mc.options.backKey.isPressed()) {
			velX -= forward.x * s;
			velZ -= forward.z * s;
		}

		if (mc.options.rightKey.isPressed()) {
			velX += right.x * s;
			velZ += right.z * s;
		}
		if (mc.options.leftKey.isPressed()) {
			velX -= right.x * s;
			velZ -= right.z * s;
		}

		if (tick == 0) {
			if (r.found()) {
				InvUtils.move().from(r.slot()).toArmor(2);
				startFly();
				startFly();
				InvUtils.move().fromArmor(2).to(r.slot());
				tick = 21;
			}
		}
		else {
			tick--;
		}
		if (tick2 >= 0) {
			mc.player.setVelocity(mc.player.getVelocity().x, 0.100000001490116, mc.player.getVelocity().z);
			y = 0.100000001490116f;
			tick2++;
			if (tick2 >= 13) {
				y = -0.060000001490116f;
				mc.player.setVelocity(mc.player.getVelocity().x, -0.060000001490116, mc.player.getVelocity().z);
				if (tick2 == 16) {
					tick2 = 0;
				}
			}
		}
	}

	private float y = 0;

	@Override
	public void onPlayerMoveEvent(PlayerMoveEvent event) {
		Vec3d vel = PlayerUtils.getHorizontalVelocity(settings.speed.get());
		double velX = vel.getX();
		double velZ = vel.getZ();

		if (mc.player.hasStatusEffect(StatusEffects.SPEED)) {
			double value = (mc.player.getStatusEffect(StatusEffects.SPEED).getAmplifier() + 1) * 0.205;
			velX += velX * value;
			velZ += velZ * value;
		}

		Anchor anchor = Modules.get().get(Anchor.class);
		if (anchor.isActive() && anchor.controlMovement) {
			velX = anchor.deltaX;
			velZ = anchor.deltaZ;
		}

		((IVec3d) event.movement).set(velX, event.movement.y, velZ);
	}

	private void fly(double y) {
		mc.player.setVelocity(0, y, 0);
	}
}
