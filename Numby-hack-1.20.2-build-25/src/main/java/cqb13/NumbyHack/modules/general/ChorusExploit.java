package cqb13.NumbyHack.modules.general;

import cqb13.NumbyHack.NumbyHack;
import cqb13.NumbyHack.events.Teleport;
import meteordevelopment.meteorclient.events.entity.player.FinishUsingItemEvent;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.events.render.Render3DEvent;
import meteordevelopment.meteorclient.events.world.TickEvent;
import meteordevelopment.meteorclient.renderer.ShapeMode;
import meteordevelopment.meteorclient.settings.*;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.Utils;
import meteordevelopment.meteorclient.utils.misc.Keybind;
import meteordevelopment.meteorclient.utils.render.RenderUtils;
import meteordevelopment.meteorclient.utils.render.color.SettingColor;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Vec3d;
import java.util.LinkedList;
import java.util.Queue;

/**
 * Based on Meteor Rejects
 */
public class ChorusExploit extends Module {
    private final SettingGroup sgGeneral = settings.getDefaultGroup();
    private final SettingGroup sgRender = settings.createGroup("Render");

    private final Setting<PositionMode> positionMode = sgGeneral.add(new EnumSetting.Builder<PositionMode>()
        .name("位置模式")
        .description("您的传送位置是如何计算的")
        .defaultValue(PositionMode.Particle)
        .build()
    );

    private final Setting<Boolean> onItemSwitch = sgGeneral.add(new BoolSetting.Builder()
        .name("换物传送")
        .description("在切换物品时传送你")
        .defaultValue(true)
        .build()
    );

    private final Setting<Boolean> onDeactivate = sgGeneral.add(new BoolSetting.Builder()
        .name("停用时传送")
        .description("在模块停用时传送你")
        .defaultValue(false)
        .build()
    );

    private final Setting<Keybind> onKey = sgGeneral.add(new KeybindSetting.Builder()
        .name("按下传送")
        .description("按下设定的键时传送")
        .defaultValue(Keybind.none())
        .action(this::sendPackets)
        .build()
    );

    private final Setting<Boolean> autoTeleport = sgGeneral.add(new BoolSetting.Builder()
        .name("时间传送")
        .description("在固定数量的刻钟后自动传送您")
        .defaultValue(false)
        .build()
    );

    private final Setting<Integer> ticksToTeleport = sgGeneral.add(new IntSetting.Builder()
        .name("传送等待的刻数")
        .description("在自动传送之前等待的刻数")
        .defaultValue(40)
        .min(0)
        .sliderMax(100)
        .visible(autoTeleport::get)
        .build()
    );

    //render
    private final Setting<Boolean> renderActual = sgRender.add(new BoolSetting.Builder()
        .name("定身")
        .description("原地不动(可与换物传送配合)")
        .defaultValue(true)
        .build()
    );

    private final Setting<ShapeMode> shapeMode = sgRender.add(new EnumSetting.Builder<ShapeMode>()
        .name("形状模式(好像没用)")
        .description("形状如何被渲染")
        .defaultValue(ShapeMode.Both)
        .build()
    );

    private final Setting<SettingColor> sideColor = sgRender.add(new ColorSetting.Builder()
        .name("侧面颜色(好像没用)")
        .description("被渲染方块四周的颜色")
        .defaultValue(new SettingColor(146,188,98, 75))
        .build()
    );

    private final Setting<SettingColor> lineColor = sgRender.add(new ColorSetting.Builder()
        .name("线框颜色(好像没用)")
        .description("被渲染方块线条的颜色")
        .defaultValue(new SettingColor(146,188,98))
        .build()
    );

    private final Setting<Boolean> drawLine = sgRender.add(new BoolSetting.Builder()
        .name("追踪线")
        .description("绘制一条线到您将要到达的位置")
        .defaultValue(true)
        .build()
    );

    private final Setting<SettingColor> lineColour = sgRender.add(new ColorSetting.Builder()
        .name("追踪线颜色")
        .description("追踪线的颜色")
        .defaultValue(new SettingColor(146,188,98, 255))
        .visible(drawLine::get)
        .build()
    );

    private int slot;
    private int delay = 0;
    private boolean ateChorus, sending, gotPosition = false;
    private double posX, posY, posZ, cposX, cposY, cposZ;
    private final Queue<TeleportConfirmC2SPacket> telePackets = new LinkedList<>();


    public ChorusExploit() {
        super(NumbyHack.CATEGORY, "紫颂果传送", "使用紫颂果进行传送时的延迟");
    }

    @Override
    public void onActivate() {
        ateChorus = false;
        delay = 0;
        telePackets.clear();
        gotPosition = false;
    }

    @Override
    public void onDeactivate() {
        if (Utils.canUpdate() && ateChorus && onDeactivate.get()) {
            sendPackets();
        }
        telePackets.clear();
        gotPosition = false;
    }

    @EventHandler
    private void onPacketSend(PacketEvent.Send event) {
        if (event.packet instanceof TeleportConfirmC2SPacket telepacket && ateChorus && !sending) {
            telePackets.add(telepacket);
            event.cancel();
        }
    }

    @EventHandler
    private void onPacketRecieve(PacketEvent.Receive event) {
        if (event.packet instanceof PlayerPositionLookS2CPacket posPacket && ateChorus) {
            event.setCancelled(true);
            if (positionMode.get() == PositionMode.PosLook) {
                cposX = posPacket.getX();
                cposY = posPacket.getY();
                cposZ = posPacket.getZ();
                gotPosition = true;
            }
        }
    }

    @EventHandler
    private void onTick(TickEvent.Pre event) {
        if (ateChorus) {
            delay++;
            if (!mc.player.getPos().equals(new Vec3d(posX, posY, posZ)) && renderActual.get()) {
                mc.player.setPos(posX, posY, posZ);
            }

            if (autoTeleport.get() && delay >= ticksToTeleport.get()) {
                sendPackets();
            }

            if (onItemSwitch.get() && slot != mc.player.getInventory().selectedSlot) {
                sendPackets();
            }
        }
    }

    @EventHandler
    private void onEat(FinishUsingItemEvent event) {
        if (event.itemStack.getItem().equals(Items.CHORUS_FRUIT)) {
            posX = mc.player.getX();
            posY = mc.player.getY();
            posZ = mc.player.getZ();
            ateChorus = true;
            slot = mc.player.getInventory().selectedSlot;
        }
    }

    @EventHandler
    private void onRender3D(Render3DEvent event) {
        if (ateChorus && gotPosition){
            event.renderer.box(cposX, cposY, cposZ, cposX + 1, cposY + 1, cposZ + 1, sideColor.get(), lineColor.get(), shapeMode.get(), 0);
        }
        if (drawLine.get() && ateChorus && gotPosition) {
            event.renderer.line(RenderUtils.center.x, RenderUtils.center.y, RenderUtils.center.z, cposX, cposY + 1, cposZ, lineColour.get());
        }
    }

    @EventHandler
    private void onTeleportParticle(Teleport event) {
        if (ateChorus && positionMode.get() == PositionMode.Particle) {
            cposX = event.x;
            cposY = event.y;
            cposZ = event.z;
            gotPosition = true;
        }
    }

    private void sendPackets() {
        sending = true;

        while (!telePackets.isEmpty()) {
            mc.getNetworkHandler().sendPacket(telePackets.poll());
        }

        delay = 0;
        ateChorus = false;
        sending = false;
        gotPosition = false;
    }

    @Override
    public String getInfoString() {
        if (autoTeleport.get() && ateChorus) return String.valueOf(ticksToTeleport.get() - delay);
        return null;
    }

    public enum PositionMode {
        Particle,
        PosLook,
        None
    } // fix box location, add chat feedback / option location in chat
}
